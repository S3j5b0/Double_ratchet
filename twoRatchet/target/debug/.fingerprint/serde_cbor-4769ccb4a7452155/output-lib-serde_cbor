{"message":"the trait bound `error::Error: StdError` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_cbor-0.11.2/src/error.rs","byte_start":6581,"byte_end":6590,"line_start":221,"line_end":221,"column_start":6,"column_end":15,"is_primary":true,"text":[{"text":"impl de::Error for Error {","highlight_start":6,"highlight_end":15}],"label":"the trait `StdError` is not implemented for `error::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required by a bound in `serde::de::Error`","code":null,"level":"note","spans":[{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_cbor-0.11.2/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":"required by a bound in this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.136/src/de/mod.rs","byte_start":5756,"byte_end":5767,"line_start":160,"line_end":160,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"        pub trait Error: Sized $(+ $($supertrait)::+)* {","highlight_start":38,"highlight_end":49}],"label":"required by this bound in `serde::de::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.136/src/de/mod.rs","byte_start":11704,"byte_end":11749,"line_start":299,"line_end":299,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"declare_error_trait!(Error: Sized + StdError);","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_error_trait!","def_site_span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.136/src/de/mod.rs","byte_start":4525,"byte_end":11678,"line_start":138,"line_end":296,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! declare_error_trait {","highlight_start":1,"highlight_end":35},{"text":"    (Error: Sized $(+ $($supertrait:ident)::+)*) => {","highlight_start":1,"highlight_end":54},{"text":"        /// The `Error` trait allows `Deserialize` implementations to create descriptive","highlight_start":1,"highlight_end":89},{"text":"        /// error messages belonging to the `Deserializer` against which they are","highlight_start":1,"highlight_end":82},{"text":"        /// currently running.","highlight_start":1,"highlight_end":31},{"text":"        ///","highlight_start":1,"highlight_end":12},{"text":"        /// Every `Deserializer` declares an `Error` type that encompasses both","highlight_start":1,"highlight_end":80},{"text":"        /// general-purpose deserialization errors as well as errors specific to the","highlight_start":1,"highlight_end":85},{"text":"        /// particular deserialization format. For example the `Error` type of","highlight_start":1,"highlight_end":79},{"text":"        /// `serde_json` can represent errors like an invalid JSON escape sequence or an","highlight_start":1,"highlight_end":89},{"text":"        /// unterminated string literal, in addition to the error cases that are part of","highlight_start":1,"highlight_end":89},{"text":"        /// this trait.","highlight_start":1,"highlight_end":24},{"text":"        ///","highlight_start":1,"highlight_end":12},{"text":"        /// Most deserializers should only need to provide the `Error::custom` method","highlight_start":1,"highlight_end":86},{"text":"        /// and inherit the default behavior for the other methods.","highlight_start":1,"highlight_end":68},{"text":"        ///","highlight_start":1,"highlight_end":12},{"text":"        /// # Example implementation","highlight_start":1,"highlight_end":37},{"text":"        ///","highlight_start":1,"highlight_end":12},{"text":"        /// The [example data format] presented on the website shows an error","highlight_start":1,"highlight_end":78},{"text":"        /// type appropriate for a basic JSON data format.","highlight_start":1,"highlight_end":59},{"text":"        ///","highlight_start":1,"highlight_end":12},{"text":"        /// [example data format]: https://serde.rs/data-format.html","highlight_start":1,"highlight_end":69},{"text":"        pub trait Error: Sized $(+ $($supertrait)::+)* {","highlight_start":1,"highlight_end":57},{"text":"            /// Raised when there is general error when deserializing a type.","highlight_start":1,"highlight_end":78},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// The message should not be capitalized and should not end with a period.","highlight_start":1,"highlight_end":88},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// ```edition2018","highlight_start":1,"highlight_end":31},{"text":"            /// # use std::str::FromStr;","highlight_start":1,"highlight_end":41},{"text":"            /// #","highlight_start":1,"highlight_end":18},{"text":"            /// # struct IpAddr;","highlight_start":1,"highlight_end":33},{"text":"            /// #","highlight_start":1,"highlight_end":18},{"text":"            /// # impl FromStr for IpAddr {","highlight_start":1,"highlight_end":44},{"text":"            /// #     type Err = String;","highlight_start":1,"highlight_end":41},{"text":"            /// #","highlight_start":1,"highlight_end":18},{"text":"            /// #     fn from_str(_: &str) -> Result<Self, String> {","highlight_start":1,"highlight_end":69},{"text":"            /// #         unimplemented!()","highlight_start":1,"highlight_end":43},{"text":"            /// #     }","highlight_start":1,"highlight_end":24},{"text":"            /// # }","highlight_start":1,"highlight_end":20},{"text":"            /// #","highlight_start":1,"highlight_end":18},{"text":"            /// use serde::de::{self, Deserialize, Deserializer};","highlight_start":1,"highlight_end":66},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// impl<'de> Deserialize<'de> for IpAddr {","highlight_start":1,"highlight_end":56},{"text":"            ///     fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>","highlight_start":1,"highlight_end":81},{"text":"            ///     where","highlight_start":1,"highlight_end":26},{"text":"            ///         D: Deserializer<'de>,","highlight_start":1,"highlight_end":46},{"text":"            ///     {","highlight_start":1,"highlight_end":22},{"text":"            ///         let s = String::deserialize(deserializer)?;","highlight_start":1,"highlight_end":68},{"text":"            ///         s.parse().map_err(de::Error::custom)","highlight_start":1,"highlight_end":61},{"text":"            ///     }","highlight_start":1,"highlight_end":22},{"text":"            /// }","highlight_start":1,"highlight_end":18},{"text":"            /// ```","highlight_start":1,"highlight_end":20},{"text":"            fn custom<T>(msg: T) -> Self","highlight_start":1,"highlight_end":41},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T: Display;","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Raised when a `Deserialize` receives a type different from what it was","highlight_start":1,"highlight_end":87},{"text":"            /// expecting.","highlight_start":1,"highlight_end":27},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// The `unexp` argument provides information about what type was received.","highlight_start":1,"highlight_end":88},{"text":"            /// This is the type that was present in the input file or other source data","highlight_start":1,"highlight_end":89},{"text":"            /// of the Deserializer.","highlight_start":1,"highlight_end":37},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// The `exp` argument provides information about what type was being","highlight_start":1,"highlight_end":82},{"text":"            /// expected. This is the type that is written in the program.","highlight_start":1,"highlight_end":75},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// For example if we try to deserialize a String out of a JSON file","highlight_start":1,"highlight_end":81},{"text":"            /// containing an integer, the unexpected type is the integer and the","highlight_start":1,"highlight_end":82},{"text":"            /// expected type is the string.","highlight_start":1,"highlight_end":45},{"text":"            #[cold]","highlight_start":1,"highlight_end":20},{"text":"            fn invalid_type(unexp: Unexpected, exp: &Expected) -> Self {","highlight_start":1,"highlight_end":73},{"text":"                Error::custom(format_args!(\"invalid type: {}, expected {}\", unexp, exp))","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Raised when a `Deserialize` receives a value of the right type but that","highlight_start":1,"highlight_end":88},{"text":"            /// is wrong for some other reason.","highlight_start":1,"highlight_end":48},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// The `unexp` argument provides information about what value was received.","highlight_start":1,"highlight_end":89},{"text":"            /// This is the value that was present in the input file or other source","highlight_start":1,"highlight_end":85},{"text":"            /// data of the Deserializer.","highlight_start":1,"highlight_end":42},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// The `exp` argument provides information about what value was being","highlight_start":1,"highlight_end":83},{"text":"            /// expected. This is the type that is written in the program.","highlight_start":1,"highlight_end":75},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// For example if we try to deserialize a String out of some binary data","highlight_start":1,"highlight_end":86},{"text":"            /// that is not valid UTF-8, the unexpected value is the bytes and the","highlight_start":1,"highlight_end":83},{"text":"            /// expected value is a string.","highlight_start":1,"highlight_end":44},{"text":"            #[cold]","highlight_start":1,"highlight_end":20},{"text":"            fn invalid_value(unexp: Unexpected, exp: &Expected) -> Self {","highlight_start":1,"highlight_end":74},{"text":"                Error::custom(format_args!(\"invalid value: {}, expected {}\", unexp, exp))","highlight_start":1,"highlight_end":90},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Raised when deserializing a sequence or map and the input data contains","highlight_start":1,"highlight_end":88},{"text":"            /// too many or too few elements.","highlight_start":1,"highlight_end":46},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// The `len` argument is the number of elements encountered. The sequence","highlight_start":1,"highlight_end":87},{"text":"            /// or map may have expected more arguments or fewer arguments.","highlight_start":1,"highlight_end":76},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// The `exp` argument provides information about what data was being","highlight_start":1,"highlight_end":82},{"text":"            /// expected. For example `exp` might say that a tuple of size 6 was","highlight_start":1,"highlight_end":81},{"text":"            /// expected.","highlight_start":1,"highlight_end":26},{"text":"            #[cold]","highlight_start":1,"highlight_end":20},{"text":"            fn invalid_length(len: usize, exp: &Expected) -> Self {","highlight_start":1,"highlight_end":68},{"text":"                Error::custom(format_args!(\"invalid length {}, expected {}\", len, exp))","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Raised when a `Deserialize` enum type received a variant with an","highlight_start":1,"highlight_end":81},{"text":"            /// unrecognized name.","highlight_start":1,"highlight_end":35},{"text":"            #[cold]","highlight_start":1,"highlight_end":20},{"text":"            fn unknown_variant(variant: &str, expected: &'static [&'static str]) -> Self {","highlight_start":1,"highlight_end":91},{"text":"                if expected.is_empty() {","highlight_start":1,"highlight_end":41},{"text":"                    Error::custom(format_args!(","highlight_start":1,"highlight_end":48},{"text":"                        \"unknown variant `{}`, there are no variants\",","highlight_start":1,"highlight_end":71},{"text":"                        variant","highlight_start":1,"highlight_end":32},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Error::custom(format_args!(","highlight_start":1,"highlight_end":48},{"text":"                        \"unknown variant `{}`, expected {}\",","highlight_start":1,"highlight_end":61},{"text":"                        variant,","highlight_start":1,"highlight_end":33},{"text":"                        OneOf { names: expected }","highlight_start":1,"highlight_end":50},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Raised when a `Deserialize` struct type received a field with an","highlight_start":1,"highlight_end":81},{"text":"            /// unrecognized name.","highlight_start":1,"highlight_end":35},{"text":"            #[cold]","highlight_start":1,"highlight_end":20},{"text":"            fn unknown_field(field: &str, expected: &'static [&'static str]) -> Self {","highlight_start":1,"highlight_end":87},{"text":"                if expected.is_empty() {","highlight_start":1,"highlight_end":41},{"text":"                    Error::custom(format_args!(","highlight_start":1,"highlight_end":48},{"text":"                        \"unknown field `{}`, there are no fields\",","highlight_start":1,"highlight_end":67},{"text":"                        field","highlight_start":1,"highlight_end":30},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Error::custom(format_args!(","highlight_start":1,"highlight_end":48},{"text":"                        \"unknown field `{}`, expected {}\",","highlight_start":1,"highlight_end":59},{"text":"                        field,","highlight_start":1,"highlight_end":31},{"text":"                        OneOf { names: expected }","highlight_start":1,"highlight_end":50},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Raised when a `Deserialize` struct type expected to receive a required","highlight_start":1,"highlight_end":87},{"text":"            /// field with a particular name but that field was not present in the","highlight_start":1,"highlight_end":83},{"text":"            /// input.","highlight_start":1,"highlight_end":23},{"text":"            #[cold]","highlight_start":1,"highlight_end":20},{"text":"            fn missing_field(field: &'static str) -> Self {","highlight_start":1,"highlight_end":60},{"text":"                Error::custom(format_args!(\"missing field `{}`\", field))","highlight_start":1,"highlight_end":73},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Raised when a `Deserialize` struct type received more than one of the","highlight_start":1,"highlight_end":86},{"text":"            /// same field.","highlight_start":1,"highlight_end":28},{"text":"            #[cold]","highlight_start":1,"highlight_end":20},{"text":"            fn duplicate_field(field: &'static str) -> Self {","highlight_start":1,"highlight_end":62},{"text":"                Error::custom(format_args!(\"duplicate field `{}`\", field))","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `error::Error: StdError` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_cbor-0.11.2/src/error.rs:221:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl de::Error for Error {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `StdError` is not implemented for `error::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `serde::de::Error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.136/src/de/mod.rs:299:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mdeclare_error_trait!(Error: Sized + StdError);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `serde::de::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_error_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `error::Error: StdError` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_cbor-0.11.2/src/error.rs","byte_start":7022,"byte_end":7032,"line_start":235,"line_end":235,"column_start":6,"column_end":16,"is_primary":true,"text":[{"text":"impl ser::Error for Error {","highlight_start":6,"highlight_end":16}],"label":"the trait `StdError` is not implemented for `error::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required by a bound in `serde::ser::Error`","code":null,"level":"note","spans":[{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_cbor-0.11.2/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":"required by a bound in this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.136/src/ser/mod.rs","byte_start":4694,"byte_end":4705,"line_start":139,"line_end":139,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"        pub trait Error: Sized $(+ $($supertrait)::+)* {","highlight_start":38,"highlight_end":49}],"label":"required by this bound in `serde::ser::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.136/src/ser/mod.rs","byte_start":6266,"byte_end":6311,"line_start":183,"line_end":183,"column_start":1,"column_end":46,"is_primary":false,"text":[{"text":"declare_error_trait!(Error: Sized + StdError);","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"declare_error_trait!","def_site_span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.136/src/ser/mod.rs","byte_start":4107,"byte_end":6240,"line_start":127,"line_end":180,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! declare_error_trait {","highlight_start":1,"highlight_end":35},{"text":"    (Error: Sized $(+ $($supertrait:ident)::+)*) => {","highlight_start":1,"highlight_end":54},{"text":"        /// Trait used by `Serialize` implementations to generically construct","highlight_start":1,"highlight_end":79},{"text":"        /// errors belonging to the `Serializer` against which they are","highlight_start":1,"highlight_end":72},{"text":"        /// currently running.","highlight_start":1,"highlight_end":31},{"text":"        ///","highlight_start":1,"highlight_end":12},{"text":"        /// # Example implementation","highlight_start":1,"highlight_end":37},{"text":"        ///","highlight_start":1,"highlight_end":12},{"text":"        /// The [example data format] presented on the website shows an error","highlight_start":1,"highlight_end":78},{"text":"        /// type appropriate for a basic JSON data format.","highlight_start":1,"highlight_end":59},{"text":"        ///","highlight_start":1,"highlight_end":12},{"text":"        /// [example data format]: https://serde.rs/data-format.html","highlight_start":1,"highlight_end":69},{"text":"        pub trait Error: Sized $(+ $($supertrait)::+)* {","highlight_start":1,"highlight_end":57},{"text":"            /// Used when a [`Serialize`] implementation encounters any error","highlight_start":1,"highlight_end":78},{"text":"            /// while serializing a type.","highlight_start":1,"highlight_end":42},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// The message should not be capitalized and should not end with a","highlight_start":1,"highlight_end":80},{"text":"            /// period.","highlight_start":1,"highlight_end":24},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// For example, a filesystem [`Path`] may refuse to serialize","highlight_start":1,"highlight_end":75},{"text":"            /// itself if it contains invalid UTF-8 data.","highlight_start":1,"highlight_end":58},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// ```edition2018","highlight_start":1,"highlight_end":31},{"text":"            /// # struct Path;","highlight_start":1,"highlight_end":31},{"text":"            /// #","highlight_start":1,"highlight_end":18},{"text":"            /// # impl Path {","highlight_start":1,"highlight_end":30},{"text":"            /// #     fn to_str(&self) -> Option<&str> {","highlight_start":1,"highlight_end":57},{"text":"            /// #         unimplemented!()","highlight_start":1,"highlight_end":43},{"text":"            /// #     }","highlight_start":1,"highlight_end":24},{"text":"            /// # }","highlight_start":1,"highlight_end":20},{"text":"            /// #","highlight_start":1,"highlight_end":18},{"text":"            /// use serde::ser::{self, Serialize, Serializer};","highlight_start":1,"highlight_end":63},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// impl Serialize for Path {","highlight_start":1,"highlight_end":42},{"text":"            ///     fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":85},{"text":"            ///     where","highlight_start":1,"highlight_end":26},{"text":"            ///         S: Serializer,","highlight_start":1,"highlight_end":39},{"text":"            ///     {","highlight_start":1,"highlight_end":22},{"text":"            ///         match self.to_str() {","highlight_start":1,"highlight_end":46},{"text":"            ///             Some(s) => serializer.serialize_str(s),","highlight_start":1,"highlight_end":68},{"text":"            ///             None => Err(ser::Error::custom(\"path contains invalid UTF-8 characters\")),","highlight_start":1,"highlight_end":103},{"text":"            ///         }","highlight_start":1,"highlight_end":26},{"text":"            ///     }","highlight_start":1,"highlight_end":22},{"text":"            /// }","highlight_start":1,"highlight_end":18},{"text":"            /// ```","highlight_start":1,"highlight_end":20},{"text":"            ///","highlight_start":1,"highlight_end":16},{"text":"            /// [`Path`]: https://doc.rust-lang.org/std/path/struct.Path.html","highlight_start":1,"highlight_end":78},{"text":"            /// [`Serialize`]: ../trait.Serialize.html","highlight_start":1,"highlight_end":55},{"text":"            fn custom<T>(msg: T) -> Self","highlight_start":1,"highlight_end":41},{"text":"            where","highlight_start":1,"highlight_end":18},{"text":"                T: Display;","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `error::Error: StdError` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_cbor-0.11.2/src/error.rs:235:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m235\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl ser::Error for Error {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `StdError` is not implemented for `error::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `serde::ser::Error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.136/src/ser/mod.rs:183:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mdeclare_error_trait!(Error: Sized + StdError);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `serde::ser::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `declare_error_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
