{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1","program":"/home/ask/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","memchr","--edition=2018","/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=f894bc1c74118ae8","-C","extra-filename=-f894bc1c74118ae8","--out-dir","/home/ask/Git/Double_ratchet/twoRatchet/target/rls/debug/deps","-L","dependency=/home/ask/Git/Double_ratchet/twoRatchet/target/rls/debug/deps","--cap-lints","allow","--cfg","memchr_runtime_simd","--cfg","memchr_runtime_sse2","--cfg","memchr_runtime_sse42","--cfg","memchr_runtime_avx","--error-format=json","--sysroot","/home/ask/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ask/Git/Double_ratchet/twoRatchet/target/rls/debug/deps/libmemchr-f894bc1c74118ae8.rmeta"},"prelude":{"crate_id":{"name":"memchr","disambiguator":[14362647790131118723,0]},"crate_root":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src","external_crates":[{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5443730852259234579,0]}},{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4162025702538114948,0]}},{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17612152343462746361,0]}}],"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":0,"byte_end":6586,"line_start":1,"line_end":181,"column_start":1,"column_end":11}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":249},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":6348,"byte_end":6354,"line_start":172,"line_end":172,"column_start":5,"column_end":11},"alias_span":null,"name":"memchr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":251},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":6356,"byte_end":6363,"line_start":172,"line_end":172,"column_start":13,"column_end":20},"alias_span":null,"name":"memchr2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":244},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":6365,"byte_end":6377,"line_start":172,"line_end":172,"column_start":22,"column_end":34},"alias_span":null,"name":"memchr2_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":253},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":6379,"byte_end":6386,"line_start":172,"line_end":172,"column_start":36,"column_end":43},"alias_span":null,"name":"memchr3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":245},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":6388,"byte_end":6400,"line_start":172,"line_end":172,"column_start":45,"column_end":57},"alias_span":null,"name":"memchr3_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":243},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":6402,"byte_end":6413,"line_start":172,"line_end":172,"column_start":59,"column_end":70},"alias_span":null,"name":"memchr_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":255},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":6419,"byte_end":6426,"line_start":173,"line_end":173,"column_start":5,"column_end":12},"alias_span":null,"name":"memrchr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":257},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":6428,"byte_end":6436,"line_start":173,"line_end":173,"column_start":14,"column_end":22},"alias_span":null,"name":"memrchr2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":247},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":6438,"byte_end":6451,"line_start":173,"line_end":173,"column_start":24,"column_end":37},"alias_span":null,"name":"memrchr2_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":259},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":6453,"byte_end":6461,"line_start":173,"line_end":173,"column_start":39,"column_end":47},"alias_span":null,"name":"memrchr3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":248},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":6463,"byte_end":6476,"line_start":173,"line_end":173,"column_start":49,"column_end":62},"alias_span":null,"name":"memrchr3_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":6478,"byte_end":6490,"line_start":173,"line_end":173,"column_start":64,"column_end":76},"alias_span":null,"name":"memrchr_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":136},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":6496,"byte_end":6502,"line_start":174,"line_end":174,"column_start":5,"column_end":11},"alias_span":null,"name":"Memchr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":152},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":6504,"byte_end":6511,"line_start":174,"line_end":174,"column_start":13,"column_end":20},"alias_span":null,"name":"Memchr2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":169},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":6513,"byte_end":6520,"line_start":174,"line_end":174,"column_start":22,"column_end":29},"alias_span":null,"name":"Memchr3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":650},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":74489,"byte_end":74498,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"alias_span":null,"name":"Prefilter","value":"","parent":{"krate":0,"index":261}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":0,"byte_end":6586,"line_start":1,"line_end":181,"column_start":1,"column_end":11},"name":"","qualname":"::","value":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":67},{"krate":0,"index":261}],"decl_id":null,"docs":"This library provides heavily optimized routines for string search primitives.","sig":null,"attributes":[{"value":"*\nThis library provides heavily optimized routines for string search primitives.\n\n# Overview\n\nThis section gives a brief high level overview of what this crate offers.\n\n* The top-level module provides routines for searching for 1, 2 or 3 bytes\n  in the forward or reverse direction. When searching for more than one byte,\n  positions are considered a match if the byte at that position matches any\n  of the bytes.\n* The [`memmem`] sub-module provides forward and reverse substring search\n  routines.\n\nIn all such cases, routines operate on `&[u8]` without regard to encoding. This\nis exactly what you want when searching either UTF-8 or arbitrary bytes.\n\n# Example: using `memchr`\n\nThis example shows how to use `memchr` to find the first occurrence of `z` in\na haystack:\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"foo bar baz quuz\";\nassert_eq!(Some(10), memchr(b'z', haystack));\n```\n\n# Example: matching one of three possible bytes\n\nThis examples shows how to use `memrchr3` to find occurrences of `a`, `b` or\n`c`, starting at the end of the haystack.\n\n```\nuse memchr::memchr3_iter;\n\nlet haystack = b\"xyzaxyzbxyzc\";\n\nlet mut it = memchr3_iter(b'a', b'b', b'c', haystack).rev();\nassert_eq!(Some(11), it.next());\nassert_eq!(Some(7), it.next());\nassert_eq!(Some(3), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches\n\nThis example shows how to use the [`memmem`] sub-module to find occurrences of\na substring in a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`memmem::Finder`]:\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```\n\n# Why use this crate?\n\nAt first glance, the APIs provided by this crate might seem weird. Why provide\na dedicated routine like `memchr` for something that could be implemented\nclearly and trivially in one line:\n\n```\nfn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n    haystack.iter().position(|&b| b == needle)\n}\n```\n\nOr similarly, why does this crate provide substring search routines when Rust's\ncore library already provides them?\n\n```\nfn search(haystack: &str, needle: &str) -> Option<usize> {\n    haystack.find(needle)\n}\n```\n\nThe primary reason for both of them to exist is performance. When it comes to\nperformance, at a high level at least, there are two primary ways to look at\nit:\n\n* **Throughput**: For this, think about it as, \"given some very large haystack\n  and a byte that never occurs in that haystack, how long does it take to\n  search through it and determine that it, in fact, does not occur?\"\n* **Latency**: For this, think about it as, \"given a tiny haystack---just a\n  few bytes---how long does it take to determine if a byte is in it?\"\n\nThe `memchr` routine in this crate has _slightly_ worse latency than the\nsolution presented above, however, its throughput can easily be over an\norder of magnitude faster. This is a good general purpose trade off to make.\nYou rarely lose, but often gain big.\n\n**NOTE:** The name `memchr` comes from the corresponding routine in libc. A key\nadvantage of using this library is that its performance is not tied to its\nquality of implementation in the libc you happen to be using, which can vary\ngreatly from platform to platform.\n\nBut what about substring search? This one is a bit more complicated. The\nprimary reason for its existence is still indeed performance, but it's also\nuseful because Rust's core library doesn't actually expose any substring\nsearch routine on arbitrary bytes. The only substring search routine that\nexists works exclusively on valid UTF-8.\n\nSo if you have valid UTF-8, is there a reason to use this over the standard\nlibrary substring search routine? Yes. This routine is faster on almost every\nmetric, including latency. The natural question then, is why isn't this\nimplementation in the standard library, even if only for searching on UTF-8?\nThe reason is that the implementation details for using SIMD in the standard\nlibrary haven't quite been worked out yet.\n\n**NOTE:** Currently, only `x86_64` targets have highly accelerated\nimplementations of substring search. For `memchr`, all targets have\nsomewhat-accelerated implementations, while only `x86_64` targets have highly\naccelerated implementations. This limitation is expected to be lifted once the\nstandard library exposes a platform independent SIMD API.\n\n# Crate features\n\n* **std** - When enabled (the default), this will permit this crate to use\n  features specific to the standard library. Currently, the only thing used\n  from the standard library is runtime SIMD CPU feature detection. This means\n  that this feature must be enabled to get AVX accelerated routines. When\n  `std` is not enabled, this crate will still attempt to use SSE2 accelerated\n  routines on `x86_64`.\n* **libc** - When enabled (**not** the default), this library will use your\n  platform's libc implementation of `memchr` (and `memrchr` on Linux). This\n  can be useful on non-`x86_64` targets where the fallback implementation in\n  this crate is not as good as the one found in your libc. All other routines\n  (e.g., `memchr[23]` and substring search) unconditionally use the\n  implementation in this crate.\n*/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":0,"byte_end":5778,"line_start":1,"line_end":154,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":5780,"byte_end":5802,"line_start":156,"line_end":156,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":5837,"byte_end":5843,"line_start":157,"line_end":157,"column_start":35,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":136},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":33518,"byte_end":33524,"line_start":34,"line_end":34,"column_start":12,"column_end":18},"name":"Memchr","qualname":"::memchr::iter::Memchr","value":"Memchr {  }","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140}],"decl_id":null,"docs":" An iterator for `memchr`.\n","sig":null,"attributes":[{"value":"/ An iterator for `memchr`.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":33477,"byte_end":33506,"line_start":33,"line_end":33,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":33775,"byte_end":33778,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<Memchr>::new","value":"pub fn new(u8, &[u8]) -> Memchr","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that yields all positions of needle in haystack.\n","sig":null,"attributes":[{"value":"/ Creates a new iterator that yields all positions of needle in haystack.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":33674,"byte_end":33749,"line_start":43,"line_end":43,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":33754,"byte_end":33763,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":152},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":34427,"byte_end":34434,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"Memchr2","qualname":"::memchr::iter::Memchr2","value":"Memchr2 {  }","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157}],"decl_id":null,"docs":" An iterator for `memchr2`.\n","sig":null,"attributes":[{"value":"/ An iterator for `memchr2`.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":34385,"byte_end":34415,"line_start":71,"line_end":71,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":34704,"byte_end":34707,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"new","qualname":"<Memchr2>::new","value":"pub fn new(u8, u8, &[u8]) -> Memchr2","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that yields all positions of needle in haystack.\n","sig":null,"attributes":[{"value":"/ Creates a new iterator that yields all positions of needle in haystack.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":34603,"byte_end":34678,"line_start":82,"line_end":82,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":34683,"byte_end":34692,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":169},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":35517,"byte_end":35524,"line_start":119,"line_end":119,"column_start":12,"column_end":19},"name":"Memchr3","qualname":"::memchr::iter::Memchr3","value":"Memchr3 {  }","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175}],"decl_id":null,"docs":" An iterator for `memchr3`.\n","sig":null,"attributes":[{"value":"/ An iterator for `memchr3`.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":35475,"byte_end":35505,"line_start":118,"line_end":118,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":35805,"byte_end":35808,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<Memchr3>::new","value":"pub fn new(u8, u8, u8, &[u8]) -> Memchr3","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Memchr3` that's initialized to zero with a haystack\n","sig":null,"attributes":[{"value":"/ Create a new `Memchr3` that's initialized to zero with a haystack","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":35710,"byte_end":35779,"line_start":130,"line_end":130,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":35784,"byte_end":35793,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":243},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":9594,"byte_end":9605,"line_start":17,"line_end":17,"column_start":8,"column_end":19},"name":"memchr_iter","qualname":"::memchr::memchr_iter","value":"pub fn memchr_iter(u8, &[u8]) -> Memchr","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needle in a haystack.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needle in a haystack.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":9511,"byte_end":9576,"line_start":15,"line_end":15,"column_start":1,"column_end":66}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":9577,"byte_end":9586,"line_start":16,"line_end":16,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":244},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":9772,"byte_end":9784,"line_start":23,"line_end":23,"column_start":8,"column_end":20},"name":"memchr2_iter","qualname":"::memchr::memchr2_iter","value":"pub fn memchr2_iter(u8, u8, &[u8]) -> Memchr2","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":9688,"byte_end":9754,"line_start":21,"line_end":21,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":9755,"byte_end":9764,"line_start":22,"line_end":22,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":245},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":9977,"byte_end":9989,"line_start":29,"line_end":29,"column_start":8,"column_end":20},"name":"memchr3_iter","qualname":"::memchr::memchr3_iter","value":"pub fn memchr3_iter(u8, u8, u8, &[u8]) -> Memchr3","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":9893,"byte_end":9959,"line_start":27,"line_end":27,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":9960,"byte_end":9969,"line_start":28,"line_end":28,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":246},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":10234,"byte_end":10246,"line_start":40,"line_end":40,"column_start":8,"column_end":20},"name":"memrchr_iter","qualname":"::memchr::memrchr_iter","value":"pub fn memrchr_iter(u8, &[u8]) -> Rev<Memchr>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needle in a haystack, in reverse.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needle in a haystack, in reverse.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":10139,"byte_end":10216,"line_start":38,"line_end":38,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":10217,"byte_end":10226,"line_start":39,"line_end":39,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":247},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":10436,"byte_end":10449,"line_start":46,"line_end":46,"column_start":8,"column_end":21},"name":"memrchr2_iter","qualname":"::memchr::memrchr2_iter","value":"pub fn memrchr2_iter(u8, u8, &[u8]) -> Rev<Memchr2>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack, in reverse.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack, in reverse.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":10340,"byte_end":10418,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":10419,"byte_end":10428,"line_start":45,"line_end":45,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":248},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":10680,"byte_end":10693,"line_start":56,"line_end":56,"column_start":8,"column_end":21},"name":"memrchr3_iter","qualname":"::memchr::memrchr3_iter","value":"pub fn memrchr3_iter(u8, u8, u8, &[u8]) -> Rev<Memchr3>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack, in reverse.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack, in reverse.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":10584,"byte_end":10662,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":10663,"byte_end":10672,"line_start":55,"line_end":55,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":249},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11600,"byte_end":11606,"line_start":87,"line_end":87,"column_start":8,"column_end":14},"name":"memchr","qualname":"::memchr::memchr","value":"pub fn memchr(u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Search for the first occurrence of a byte in a slice.","sig":null,"attributes":[{"value":"/ Search for the first occurrence of a byte in a slice.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":10854,"byte_end":10911,"line_start":65,"line_end":65,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":10912,"byte_end":10915,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the first occurrence of `needle` in","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":10916,"byte_end":10995,"line_start":67,"line_end":67,"column_start":1,"column_end":80}},{"value":"/ `haystack`, or `None` if one is not found. If an index is returned, it is","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":10996,"byte_end":11073,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ guaranteed to be less than `usize::MAX`.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11074,"byte_end":11118,"line_start":69,"line_end":69,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11119,"byte_end":11122,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11123,"byte_end":11181,"line_start":71,"line_end":71,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().position(|&b| b == needle)`, `memchr` will use a highly","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11182,"byte_end":11258,"line_start":72,"line_end":72,"column_start":1,"column_end":77}},{"value":"/ optimized routine that can be up to an order of magnitude faster in some","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11259,"byte_end":11335,"line_start":73,"line_end":73,"column_start":1,"column_end":77}},{"value":"/ cases.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11336,"byte_end":11346,"line_start":74,"line_end":74,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11347,"byte_end":11350,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11351,"byte_end":11364,"line_start":76,"line_end":76,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11365,"byte_end":11368,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the first position of a byte in a byte string.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11369,"byte_end":11442,"line_start":78,"line_end":78,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11443,"byte_end":11446,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11447,"byte_end":11454,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"/ use memchr::memchr;","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11455,"byte_end":11478,"line_start":81,"line_end":81,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11479,"byte_end":11482,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11483,"byte_end":11525,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memchr(b'k', haystack), Some(8));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11526,"byte_end":11574,"line_start":84,"line_end":84,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11575,"byte_end":11582,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":11583,"byte_end":11592,"line_start":86,"line_end":86,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":251},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":13453,"byte_end":13460,"line_start":151,"line_end":151,"column_start":8,"column_end":15},"name":"memchr2","qualname":"::memchr::memchr2","value":"pub fn memchr2(u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memchr`, but searches for either of two bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memchr`, but searches for either of two bytes instead of just one.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":12572,"byte_end":12648,"line_start":127,"line_end":127,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":12649,"byte_end":12652,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the first occurrence of `needle1`","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":12653,"byte_end":12730,"line_start":129,"line_end":129,"column_start":1,"column_end":78}},{"value":"/ or the first occurrence of `needle2` in `haystack` (whichever occurs","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":12731,"byte_end":12803,"line_start":130,"line_end":130,"column_start":1,"column_end":73}},{"value":"/ earlier), or `None` if neither one is found. If an index is returned, it is","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":12804,"byte_end":12883,"line_start":131,"line_end":131,"column_start":1,"column_end":80}},{"value":"/ guaranteed to be less than `usize::MAX`.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":12884,"byte_end":12928,"line_start":132,"line_end":132,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":12929,"byte_end":12932,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":12933,"byte_end":12991,"line_start":134,"line_end":134,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().position(|&b| b == needle1 || b == needle2)`, `memchr2`","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":12992,"byte_end":13068,"line_start":135,"line_end":135,"column_start":1,"column_end":77}},{"value":"/ will use a highly optimized routine that can be up to an order of magnitude","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":13069,"byte_end":13148,"line_start":136,"line_end":136,"column_start":1,"column_end":80}},{"value":"/ faster in some cases.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":13149,"byte_end":13174,"line_start":137,"line_end":137,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":13175,"byte_end":13178,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":13179,"byte_end":13192,"line_start":139,"line_end":139,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":13193,"byte_end":13196,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the first position of either of two bytes in a byte","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":13197,"byte_end":13275,"line_start":141,"line_end":141,"column_start":1,"column_end":79}},{"value":"/ string.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":13276,"byte_end":13287,"line_start":142,"line_end":142,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":13288,"byte_end":13291,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":13292,"byte_end":13299,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"/ use memchr::memchr2;","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":13300,"byte_end":13324,"line_start":145,"line_end":145,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":13325,"byte_end":13328,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":13329,"byte_end":13371,"line_start":147,"line_end":147,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memchr2(b'k', b'q', haystack), Some(4));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":13372,"byte_end":13427,"line_start":148,"line_end":148,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":13428,"byte_end":13435,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":13436,"byte_end":13445,"line_start":150,"line_end":150,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":253},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":15153,"byte_end":15160,"line_start":204,"line_end":204,"column_start":8,"column_end":15},"name":"memchr3","qualname":"::memchr::memchr3","value":"pub fn memchr3(u8, u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memchr`, but searches for any of three bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memchr`, but searches for any of three bytes instead of just one.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14221,"byte_end":14296,"line_start":180,"line_end":180,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14297,"byte_end":14300,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the first occurrence of `needle1`,","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14301,"byte_end":14379,"line_start":182,"line_end":182,"column_start":1,"column_end":79}},{"value":"/ the first occurrence of `needle2`, or the first occurrence of `needle3` in","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14380,"byte_end":14458,"line_start":183,"line_end":183,"column_start":1,"column_end":79}},{"value":"/ `haystack` (whichever occurs earliest), or `None` if none are found. If an","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14459,"byte_end":14537,"line_start":184,"line_end":184,"column_start":1,"column_end":79}},{"value":"/ index is returned, it is guaranteed to be less than `usize::MAX`.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14538,"byte_end":14607,"line_start":185,"line_end":185,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14608,"byte_end":14611,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14612,"byte_end":14670,"line_start":187,"line_end":187,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().position(|&b| b == needle1 || b == needle2 ||","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14671,"byte_end":14737,"line_start":188,"line_end":188,"column_start":1,"column_end":67}},{"value":"/ b == needle3)`, `memchr3` will use a highly optimized routine that can be","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14738,"byte_end":14815,"line_start":189,"line_end":189,"column_start":1,"column_end":78}},{"value":"/ up to an order of magnitude faster in some cases.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14816,"byte_end":14869,"line_start":190,"line_end":190,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14870,"byte_end":14873,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14874,"byte_end":14887,"line_start":192,"line_end":192,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14888,"byte_end":14891,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the first position of any of three bytes in a byte","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14892,"byte_end":14969,"line_start":194,"line_end":194,"column_start":1,"column_end":78}},{"value":"/ string.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14970,"byte_end":14981,"line_start":195,"line_end":195,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14982,"byte_end":14985,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14986,"byte_end":14993,"line_start":197,"line_end":197,"column_start":1,"column_end":8}},{"value":"/ use memchr::memchr3;","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":14994,"byte_end":15018,"line_start":198,"line_end":198,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":15019,"byte_end":15022,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":15023,"byte_end":15065,"line_start":200,"line_end":200,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memchr3(b'k', b'q', b'e', haystack), Some(2));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":15066,"byte_end":15127,"line_start":201,"line_end":201,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":15128,"byte_end":15135,"line_start":202,"line_end":202,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":15136,"byte_end":15145,"line_start":203,"line_end":203,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":255},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16746,"byte_end":16753,"line_start":260,"line_end":260,"column_start":8,"column_end":15},"name":"memrchr","qualname":"::memchr::memrchr","value":"pub fn memrchr(u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Search for the last occurrence of a byte in a slice.","sig":null,"attributes":[{"value":"/ Search for the last occurrence of a byte in a slice.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":15998,"byte_end":16054,"line_start":238,"line_end":238,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16055,"byte_end":16058,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the last occurrence of `needle` in","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16059,"byte_end":16137,"line_start":240,"line_end":240,"column_start":1,"column_end":79}},{"value":"/ `haystack`, or `None` if one is not found. If an index is returned, it is","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16138,"byte_end":16215,"line_start":241,"line_end":241,"column_start":1,"column_end":78}},{"value":"/ guaranteed to be less than `usize::MAX`.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16216,"byte_end":16260,"line_start":242,"line_end":242,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16261,"byte_end":16264,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16265,"byte_end":16323,"line_start":244,"line_end":244,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().rposition(|&b| b == needle)`, `memrchr` will use a highly","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16324,"byte_end":16402,"line_start":245,"line_end":245,"column_start":1,"column_end":79}},{"value":"/ optimized routine that can be up to an order of magnitude faster in some","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16403,"byte_end":16479,"line_start":246,"line_end":246,"column_start":1,"column_end":77}},{"value":"/ cases.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16480,"byte_end":16490,"line_start":247,"line_end":247,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16491,"byte_end":16494,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16495,"byte_end":16508,"line_start":249,"line_end":249,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16509,"byte_end":16512,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the last position of a byte in a byte string.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16513,"byte_end":16585,"line_start":251,"line_end":251,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16586,"byte_end":16589,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16590,"byte_end":16597,"line_start":253,"line_end":253,"column_start":1,"column_end":8}},{"value":"/ use memchr::memrchr;","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16598,"byte_end":16622,"line_start":254,"line_end":254,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16623,"byte_end":16626,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16627,"byte_end":16669,"line_start":256,"line_end":256,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memrchr(b'o', haystack), Some(17));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16670,"byte_end":16720,"line_start":257,"line_end":257,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16721,"byte_end":16728,"line_start":258,"line_end":258,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":16729,"byte_end":16738,"line_start":259,"line_end":259,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":257},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18658,"byte_end":18666,"line_start":325,"line_end":325,"column_start":8,"column_end":16},"name":"memrchr2","qualname":"::memchr::memrchr2","value":"pub fn memrchr2(u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memrchr`, but searches for either of two bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memrchr`, but searches for either of two bytes instead of just one.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":17777,"byte_end":17854,"line_start":301,"line_end":301,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":17855,"byte_end":17858,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the last occurrence of `needle1` or","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":17859,"byte_end":17938,"line_start":303,"line_end":303,"column_start":1,"column_end":80}},{"value":"/ the last occurrence of `needle2` in `haystack` (whichever occurs later), or","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":17939,"byte_end":18018,"line_start":304,"line_end":304,"column_start":1,"column_end":80}},{"value":"/ `None` if neither one is found. If an index is returned, it is guaranteed","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18019,"byte_end":18096,"line_start":305,"line_end":305,"column_start":1,"column_end":78}},{"value":"/ to be less than `usize::MAX`.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18097,"byte_end":18130,"line_start":306,"line_end":306,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18131,"byte_end":18134,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18135,"byte_end":18193,"line_start":308,"line_end":308,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().rposition(|&b| b == needle1 || b == needle2)`, `memrchr2`","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18194,"byte_end":18272,"line_start":309,"line_end":309,"column_start":1,"column_end":79}},{"value":"/ will use a highly optimized routine that can be up to an order of magnitude","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18273,"byte_end":18352,"line_start":310,"line_end":310,"column_start":1,"column_end":80}},{"value":"/ faster in some cases.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18353,"byte_end":18378,"line_start":311,"line_end":311,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18379,"byte_end":18382,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18383,"byte_end":18396,"line_start":313,"line_end":313,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18397,"byte_end":18400,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the last position of either of two bytes in a byte","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18401,"byte_end":18478,"line_start":315,"line_end":315,"column_start":1,"column_end":78}},{"value":"/ string.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18479,"byte_end":18490,"line_start":316,"line_end":316,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18491,"byte_end":18494,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18495,"byte_end":18502,"line_start":318,"line_end":318,"column_start":1,"column_end":8}},{"value":"/ use memchr::memrchr2;","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18503,"byte_end":18528,"line_start":319,"line_end":319,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18529,"byte_end":18532,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18533,"byte_end":18575,"line_start":321,"line_end":321,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memrchr2(b'k', b'q', haystack), Some(8));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18576,"byte_end":18632,"line_start":322,"line_end":322,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18633,"byte_end":18640,"line_start":323,"line_end":323,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":18641,"byte_end":18650,"line_start":324,"line_end":324,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":259},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":20360,"byte_end":20368,"line_start":378,"line_end":378,"column_start":8,"column_end":16},"name":"memrchr3","qualname":"::memchr::memrchr3","value":"pub fn memrchr3(u8, u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memrchr`, but searches for any of three bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memrchr`, but searches for any of three bytes instead of just one.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":19430,"byte_end":19506,"line_start":354,"line_end":354,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":19507,"byte_end":19510,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the last occurrence of `needle1`,","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":19511,"byte_end":19588,"line_start":356,"line_end":356,"column_start":1,"column_end":78}},{"value":"/ the last occurrence of `needle2`, or the last occurrence of `needle3` in","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":19589,"byte_end":19665,"line_start":357,"line_end":357,"column_start":1,"column_end":77}},{"value":"/ `haystack` (whichever occurs later), or `None` if none are found. If an","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":19666,"byte_end":19741,"line_start":358,"line_end":358,"column_start":1,"column_end":76}},{"value":"/ index is returned, it is guaranteed to be less than `usize::MAX`.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":19742,"byte_end":19811,"line_start":359,"line_end":359,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":19812,"byte_end":19815,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":19816,"byte_end":19874,"line_start":361,"line_end":361,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().rposition(|&b| b == needle1 || b == needle2 ||","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":19875,"byte_end":19942,"line_start":362,"line_end":362,"column_start":1,"column_end":68}},{"value":"/ b == needle3)`, `memrchr3` will use a highly optimized routine that can be","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":19943,"byte_end":20021,"line_start":363,"line_end":363,"column_start":1,"column_end":79}},{"value":"/ up to an order of magnitude faster in some cases.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":20022,"byte_end":20075,"line_start":364,"line_end":364,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":20076,"byte_end":20079,"line_start":365,"line_end":365,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":20080,"byte_end":20093,"line_start":366,"line_end":366,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":20094,"byte_end":20097,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the last position of any of three bytes in a byte","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":20098,"byte_end":20174,"line_start":368,"line_end":368,"column_start":1,"column_end":77}},{"value":"/ string.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":20175,"byte_end":20186,"line_start":369,"line_end":369,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":20187,"byte_end":20190,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":20191,"byte_end":20198,"line_start":371,"line_end":371,"column_start":1,"column_end":8}},{"value":"/ use memchr::memrchr3;","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":20199,"byte_end":20224,"line_start":372,"line_end":372,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":20225,"byte_end":20228,"line_start":373,"line_end":373,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":20229,"byte_end":20271,"line_start":374,"line_end":374,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memrchr3(b'k', b'q', b'e', haystack), Some(8));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":20272,"byte_end":20334,"line_start":375,"line_end":375,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":20335,"byte_end":20342,"line_start":376,"line_end":376,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/mod.rs","byte_start":20343,"byte_end":20352,"line_start":377,"line_end":377,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":261},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"memmem","qualname":"::memmem","value":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":277},{"krate":0,"index":280},{"krate":0,"index":283},{"krate":0,"index":286},{"krate":0,"index":289},{"krate":0,"index":315},{"krate":0,"index":416},{"krate":0,"index":435},{"krate":0,"index":444},{"krate":0,"index":479},{"krate":0,"index":483},{"krate":0,"index":501},{"krate":0,"index":530},{"krate":0,"index":534},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":790},{"krate":0,"index":797},{"krate":0,"index":540},{"krate":0,"index":544},{"krate":0,"index":801},{"krate":0,"index":807},{"krate":0,"index":549},{"krate":0,"index":553},{"krate":0,"index":811},{"krate":0,"index":814},{"krate":0,"index":817},{"krate":0,"index":558},{"krate":0,"index":820},{"krate":0,"index":823},{"krate":0,"index":826},{"krate":0,"index":568},{"krate":0,"index":829},{"krate":0,"index":831},{"krate":0,"index":833},{"krate":0,"index":835},{"krate":0,"index":579},{"krate":0,"index":837},{"krate":0,"index":843},{"krate":0,"index":846},{"krate":0,"index":849},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":857},{"krate":0,"index":859},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":881},{"krate":0,"index":883},{"krate":0,"index":588},{"krate":0,"index":599},{"krate":0,"index":885},{"krate":0,"index":890},{"krate":0,"index":893},{"krate":0,"index":896},{"krate":0,"index":905},{"krate":0,"index":907},{"krate":0,"index":601}],"decl_id":null,"docs":"This module provides forward and reverse substring search routines.","sig":null,"attributes":[{"value":"*\nThis module provides forward and reverse substring search routines.\n\nUnlike the standard library's substring search routines, these work on\narbitrary bytes. For all non-empty needles, these routines will report exactly\nthe same values as the corresponding routines in the standard library. For\nthe empty needle, the standard library reports matches only at valid UTF-8\nboundaries, where as these routines will report matches at every position.\n\nOther than being able to work on arbitrary bytes, the primary reason to prefer\nthese routines over the standard library routines is that these will generally\nbe faster. In some cases, significantly so.\n\n# Example: iterating over substring matches\n\nThis example shows how to use [`find_iter`] to find occurrences of a substring\nin a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches in reverse\n\nThis example shows how to use [`rfind_iter`] to find occurrences of a substring\nin a haystack starting from the end of the haystack.\n\n**NOTE:** This module does not implement double ended iterators, so reverse\nsearches aren't done by calling `rev` on a forward iterator.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::rfind_iter(haystack, \"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`Finder`] (or a [`FinderRev`] for\nreverse searches).\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```\n*/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":72290,"byte_end":74462,"line_start":1,"line_end":67,"column_start":1,"column_end":3}}]},{"kind":"TupleVariant","id":{"krate":0,"index":651},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137956,"byte_end":137960,"line_start":155,"line_end":155,"column_start":5,"column_end":9},"name":"None","qualname":"::memmem::prefilter::Prefilter::None","value":"Prefilter::None","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" Never used a prefilter in substring search.\n","sig":null,"attributes":[{"value":"/ Never used a prefilter in substring search.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137904,"byte_end":137951,"line_start":154,"line_end":154,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":653},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":138187,"byte_end":138191,"line_start":159,"line_end":159,"column_start":5,"column_end":9},"name":"Auto","qualname":"::memmem::prefilter::Prefilter::Auto","value":"Prefilter::Auto","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" Automatically detect whether a heuristic prefilter should be used. If\n it is used, then heuristics will be used to dynamically disable the\n prefilter if it is believed to not be carrying its weight.\n","sig":null,"attributes":[{"value":"/ Automatically detect whether a heuristic prefilter should be used. If","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137966,"byte_end":138039,"line_start":156,"line_end":156,"column_start":5,"column_end":78}},{"value":"/ it is used, then heuristics will be used to dynamically disable the","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":138044,"byte_end":138115,"line_start":157,"line_end":157,"column_start":5,"column_end":76}},{"value":"/ prefilter if it is believed to not be carrying its weight.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":138120,"byte_end":138182,"line_start":158,"line_end":158,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":650},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137888,"byte_end":137897,"line_start":153,"line_end":153,"column_start":10,"column_end":19},"name":"Prefilter","qualname":"::memmem::prefilter::Prefilter","value":"pub enum Prefilter { None, Auto, }","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":653}],"decl_id":null,"docs":" Prefilter controls whether heuristics are used to accelerate searching.","sig":null,"attributes":[{"value":"/ Prefilter controls whether heuristics are used to accelerate searching.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":136390,"byte_end":136465,"line_start":126,"line_end":126,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":136466,"byte_end":136469,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ A prefilter refers to the idea of detecting candidate matches very quickly,","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":136470,"byte_end":136549,"line_start":128,"line_end":128,"column_start":1,"column_end":80}},{"value":"/ and then confirming whether those candidates are full matches. This","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":136550,"byte_end":136621,"line_start":129,"line_end":129,"column_start":1,"column_end":72}},{"value":"/ idea can be quite effective since it's often the case that looking for","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":136622,"byte_end":136696,"line_start":130,"line_end":130,"column_start":1,"column_end":75}},{"value":"/ candidates can be a lot faster than running a complete substring search","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":136697,"byte_end":136772,"line_start":131,"line_end":131,"column_start":1,"column_end":76}},{"value":"/ over the entire input. Namely, looking for candidates can be done with","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":136773,"byte_end":136847,"line_start":132,"line_end":132,"column_start":1,"column_end":75}},{"value":"/ extremely fast vectorized code.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":136848,"byte_end":136883,"line_start":133,"line_end":133,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":136884,"byte_end":136887,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ The downside of a prefilter is that it assumes false positives (which are","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":136888,"byte_end":136965,"line_start":135,"line_end":135,"column_start":1,"column_end":78}},{"value":"/ candidates generated by a prefilter that aren't matches) are somewhat rare","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":136966,"byte_end":137044,"line_start":136,"line_end":136,"column_start":1,"column_end":79}},{"value":"/ relative to the frequency of full matches. That is, if a lot of false","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137045,"byte_end":137118,"line_start":137,"line_end":137,"column_start":1,"column_end":74}},{"value":"/ positives are generated, then it's possible for search time to be worse","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137119,"byte_end":137194,"line_start":138,"line_end":138,"column_start":1,"column_end":76}},{"value":"/ than if the prefilter wasn't enabled in the first place.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137195,"byte_end":137255,"line_start":139,"line_end":139,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137256,"byte_end":137259,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ Another downside of a prefilter is that it can result in highly variable","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137260,"byte_end":137336,"line_start":141,"line_end":141,"column_start":1,"column_end":77}},{"value":"/ performance, where some cases are extraordinarily fast and others aren't.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137337,"byte_end":137414,"line_start":142,"line_end":142,"column_start":1,"column_end":78}},{"value":"/ Typically, variable performance isn't a problem, but it may be for your use","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137415,"byte_end":137494,"line_start":143,"line_end":143,"column_start":1,"column_end":80}},{"value":"/ case.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137495,"byte_end":137504,"line_start":144,"line_end":144,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137505,"byte_end":137508,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ The use of prefilters in this implementation does use a heuristic to detect","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137509,"byte_end":137588,"line_start":146,"line_end":146,"column_start":1,"column_end":80}},{"value":"/ when a prefilter might not be carrying its weight, and will dynamically","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137589,"byte_end":137664,"line_start":147,"line_end":147,"column_start":1,"column_end":76}},{"value":"/ disable its use. Nevertheless, this configuration option gives callers","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137665,"byte_end":137739,"line_start":148,"line_end":148,"column_start":1,"column_end":75}},{"value":"/ the ability to disable prefilters if you have knowledge that they won't be","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137740,"byte_end":137818,"line_start":149,"line_end":149,"column_start":1,"column_end":79}},{"value":"/ useful.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137819,"byte_end":137830,"line_start":150,"line_end":150,"column_start":1,"column_end":12}},{"value":"non_exhaustive","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":137861,"byte_end":137878,"line_start":152,"line_end":152,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":530},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77869,"byte_end":77878,"line_start":188,"line_end":188,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::memmem::find_iter","value":"pub fn find_iter<'h, 'n, N: 'n + ?Sized + AsRef<[u8]>>(&'h [u8], &'n N)\n-> FindIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all occurrences of a substring in a haystack.","sig":null,"attributes":[{"value":"/ Returns an iterator over all occurrences of a substring in a haystack.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77141,"byte_end":77215,"line_start":162,"line_end":162,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77216,"byte_end":77219,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ # Complexity","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77220,"byte_end":77236,"line_start":164,"line_end":164,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77237,"byte_end":77240,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77241,"byte_end":77313,"line_start":166,"line_end":166,"column_start":1,"column_end":73}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77314,"byte_end":77386,"line_start":167,"line_end":167,"column_start":1,"column_end":73}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77387,"byte_end":77434,"line_start":168,"line_end":168,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77435,"byte_end":77438,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77439,"byte_end":77508,"line_start":170,"line_end":170,"column_start":1,"column_end":70}},{"value":"/ complexity.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77509,"byte_end":77524,"line_start":171,"line_end":171,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77525,"byte_end":77528,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77529,"byte_end":77543,"line_start":173,"line_end":173,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77544,"byte_end":77547,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77548,"byte_end":77564,"line_start":175,"line_end":175,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77565,"byte_end":77568,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77569,"byte_end":77576,"line_start":177,"line_end":177,"column_start":1,"column_end":8}},{"value":"/ use memchr::memmem;","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77577,"byte_end":77600,"line_start":178,"line_end":178,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77601,"byte_end":77604,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"foo bar foo baz foo\";","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77605,"byte_end":77647,"line_start":180,"line_end":180,"column_start":1,"column_end":43}},{"value":"/ let mut it = memmem::find_iter(haystack, b\"foo\");","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77648,"byte_end":77701,"line_start":181,"line_end":181,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(Some(0), it.next());","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77702,"byte_end":77737,"line_start":182,"line_end":182,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(Some(8), it.next());","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77738,"byte_end":77773,"line_start":183,"line_end":183,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(Some(16), it.next());","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77774,"byte_end":77810,"line_start":184,"line_end":184,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77811,"byte_end":77843,"line_start":185,"line_end":185,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77844,"byte_end":77851,"line_start":186,"line_end":186,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":77852,"byte_end":77861,"line_start":187,"line_end":187,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":534},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78777,"byte_end":78787,"line_start":222,"line_end":222,"column_start":8,"column_end":18},"name":"rfind_iter","qualname":"::memmem::rfind_iter","value":"pub fn rfind_iter<'h, 'n, N: 'n + ?Sized + AsRef<[u8]>>(&'h [u8], &'n N)\n-> FindRevIter","parent":null,"children":[],"decl_id":null,"docs":" Returns a reverse iterator over all occurrences of a substring in a\n haystack.","sig":null,"attributes":[{"value":"/ Returns a reverse iterator over all occurrences of a substring in a","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78037,"byte_end":78108,"line_start":195,"line_end":195,"column_start":1,"column_end":72}},{"value":"/ haystack.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78109,"byte_end":78122,"line_start":196,"line_end":196,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78123,"byte_end":78126,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ # Complexity","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78127,"byte_end":78143,"line_start":198,"line_end":198,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78144,"byte_end":78147,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78148,"byte_end":78220,"line_start":200,"line_end":200,"column_start":1,"column_end":73}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78221,"byte_end":78293,"line_start":201,"line_end":201,"column_start":1,"column_end":73}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78294,"byte_end":78341,"line_start":202,"line_end":202,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78342,"byte_end":78345,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78346,"byte_end":78415,"line_start":204,"line_end":204,"column_start":1,"column_end":70}},{"value":"/ complexity.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78416,"byte_end":78431,"line_start":205,"line_end":205,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78432,"byte_end":78435,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78436,"byte_end":78450,"line_start":207,"line_end":207,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78451,"byte_end":78454,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78455,"byte_end":78471,"line_start":209,"line_end":209,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78472,"byte_end":78475,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78476,"byte_end":78483,"line_start":211,"line_end":211,"column_start":1,"column_end":8}},{"value":"/ use memchr::memmem;","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78484,"byte_end":78507,"line_start":212,"line_end":212,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78508,"byte_end":78511,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"foo bar foo baz foo\";","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78512,"byte_end":78554,"line_start":214,"line_end":214,"column_start":1,"column_end":43}},{"value":"/ let mut it = memmem::rfind_iter(haystack, b\"foo\");","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78555,"byte_end":78609,"line_start":215,"line_end":215,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Some(16), it.next());","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78610,"byte_end":78646,"line_start":216,"line_end":216,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(Some(8), it.next());","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78647,"byte_end":78682,"line_start":217,"line_end":217,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(Some(0), it.next());","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78683,"byte_end":78718,"line_start":218,"line_end":218,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78719,"byte_end":78751,"line_start":219,"line_end":219,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78752,"byte_end":78759,"line_start":220,"line_end":220,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78760,"byte_end":78769,"line_start":221,"line_end":221,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":538},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79825,"byte_end":79829,"line_start":257,"line_end":257,"column_start":8,"column_end":12},"name":"find","qualname":"::memmem::find","value":"pub fn find(&[u8], &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of the given needle.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of the given needle.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":78955,"byte_end":79021,"line_start":229,"line_end":229,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79022,"byte_end":79025,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ Note that if you're are searching for the same needle in many different","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79026,"byte_end":79101,"line_start":231,"line_end":231,"column_start":1,"column_end":76}},{"value":"/ small haystacks, it may be faster to initialize a [`Finder`] once,","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79102,"byte_end":79172,"line_start":232,"line_end":232,"column_start":1,"column_end":71}},{"value":"/ and reuse it for each search.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79173,"byte_end":79206,"line_start":233,"line_end":233,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79207,"byte_end":79210,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ # Complexity","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79211,"byte_end":79227,"line_start":235,"line_end":235,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79228,"byte_end":79231,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79232,"byte_end":79304,"line_start":237,"line_end":237,"column_start":1,"column_end":73}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79305,"byte_end":79377,"line_start":238,"line_end":238,"column_start":1,"column_end":73}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79378,"byte_end":79425,"line_start":239,"line_end":239,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79426,"byte_end":79429,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79430,"byte_end":79499,"line_start":241,"line_end":241,"column_start":1,"column_end":70}},{"value":"/ complexity.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79500,"byte_end":79515,"line_start":242,"line_end":242,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79516,"byte_end":79519,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79520,"byte_end":79534,"line_start":244,"line_end":244,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79535,"byte_end":79538,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79539,"byte_end":79555,"line_start":246,"line_end":246,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79556,"byte_end":79559,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79560,"byte_end":79567,"line_start":248,"line_end":248,"column_start":1,"column_end":8}},{"value":"/ use memchr::memmem;","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79568,"byte_end":79591,"line_start":249,"line_end":249,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79592,"byte_end":79595,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"foo bar baz\";","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79596,"byte_end":79630,"line_start":251,"line_end":251,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(Some(0), memmem::find(haystack, b\"foo\"));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79631,"byte_end":79687,"line_start":252,"line_end":252,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(Some(4), memmem::find(haystack, b\"bar\"));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79688,"byte_end":79744,"line_start":253,"line_end":253,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(None, memmem::find(haystack, b\"quux\"));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79745,"byte_end":79799,"line_start":254,"line_end":254,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79800,"byte_end":79807,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":79808,"byte_end":79817,"line_start":256,"line_end":256,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80949,"byte_end":80954,"line_start":294,"line_end":294,"column_start":8,"column_end":13},"name":"rfind","qualname":"::memmem::rfind","value":"pub fn rfind(&[u8], &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of the given needle.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of the given needle.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80017,"byte_end":80082,"line_start":265,"line_end":265,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80083,"byte_end":80086,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ Note that if you're are searching for the same needle in many different","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80087,"byte_end":80162,"line_start":267,"line_end":267,"column_start":1,"column_end":76}},{"value":"/ small haystacks, it may be faster to initialize a [`FinderRev`] once,","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80163,"byte_end":80236,"line_start":268,"line_end":268,"column_start":1,"column_end":74}},{"value":"/ and reuse it for each search.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80237,"byte_end":80270,"line_start":269,"line_end":269,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80271,"byte_end":80274,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ # Complexity","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80275,"byte_end":80291,"line_start":271,"line_end":271,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80292,"byte_end":80295,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80296,"byte_end":80368,"line_start":273,"line_end":273,"column_start":1,"column_end":73}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80369,"byte_end":80441,"line_start":274,"line_end":274,"column_start":1,"column_end":73}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80442,"byte_end":80489,"line_start":275,"line_end":275,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80490,"byte_end":80493,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80494,"byte_end":80563,"line_start":277,"line_end":277,"column_start":1,"column_end":70}},{"value":"/ complexity.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80564,"byte_end":80579,"line_start":278,"line_end":278,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80580,"byte_end":80583,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80584,"byte_end":80598,"line_start":280,"line_end":280,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80599,"byte_end":80602,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80603,"byte_end":80619,"line_start":282,"line_end":282,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80620,"byte_end":80623,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80624,"byte_end":80631,"line_start":284,"line_end":284,"column_start":1,"column_end":8}},{"value":"/ use memchr::memmem;","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80632,"byte_end":80655,"line_start":285,"line_end":285,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80656,"byte_end":80659,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"foo bar baz\";","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80660,"byte_end":80694,"line_start":287,"line_end":287,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(Some(0), memmem::rfind(haystack, b\"foo\"));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80695,"byte_end":80752,"line_start":288,"line_end":288,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(Some(4), memmem::rfind(haystack, b\"bar\"));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80753,"byte_end":80810,"line_start":289,"line_end":289,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(Some(8), memmem::rfind(haystack, b\"ba\"));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80811,"byte_end":80867,"line_start":290,"line_end":290,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(None, memmem::rfind(haystack, b\"quux\"));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80868,"byte_end":80923,"line_start":291,"line_end":291,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80924,"byte_end":80931,"line_start":292,"line_end":292,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":80932,"byte_end":80941,"line_start":293,"line_end":293,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":790},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":81391,"byte_end":81399,"line_start":309,"line_end":309,"column_start":12,"column_end":20},"name":"FindIter","qualname":"::memmem::FindIter","value":"FindIter {  }","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":796}],"decl_id":null,"docs":" An iterator over non-overlapping substring matches.","sig":null,"attributes":[{"value":"/ An iterator over non-overlapping substring matches.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":81147,"byte_end":81202,"line_start":302,"line_end":302,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":81203,"byte_end":81206,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ Matches are reported by the byte offset at which they begin.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":81207,"byte_end":81271,"line_start":304,"line_end":304,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":81272,"byte_end":81275,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ `'h` is the lifetime of the haystack while `'n` is the lifetime of the","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":81276,"byte_end":81350,"line_start":306,"line_end":306,"column_start":1,"column_end":75}},{"value":"/ needle.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":81351,"byte_end":81362,"line_start":307,"line_end":307,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":801},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":82624,"byte_end":82635,"line_start":356,"line_end":356,"column_start":12,"column_end":23},"name":"FindRevIter","qualname":"::memmem::FindRevIter","value":"FindRevIter {  }","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806}],"decl_id":null,"docs":" An iterator over non-overlapping substring matches in reverse.","sig":null,"attributes":[{"value":"/ An iterator over non-overlapping substring matches in reverse.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":82369,"byte_end":82435,"line_start":349,"line_end":349,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":82436,"byte_end":82439,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ Matches are reported by the byte offset at which they begin.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":82440,"byte_end":82504,"line_start":351,"line_end":351,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":82505,"byte_end":82508,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ `'h` is the lifetime of the haystack while `'n` is the lifetime of the","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":82509,"byte_end":82583,"line_start":353,"line_end":353,"column_start":1,"column_end":75}},{"value":"/ needle.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":82584,"byte_end":82595,"line_start":354,"line_end":354,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":811},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84485,"byte_end":84491,"line_start":412,"line_end":412,"column_start":12,"column_end":18},"name":"Finder","qualname":"::memmem::Finder","value":"Finder {  }","parent":null,"children":[{"krate":0,"index":813}],"decl_id":null,"docs":" A single substring searcher fixed to a particular needle.","sig":null,"attributes":[{"value":"/ A single substring searcher fixed to a particular needle.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":83692,"byte_end":83753,"line_start":398,"line_end":398,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":83754,"byte_end":83757,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/ The purpose of this type is to permit callers to construct a substring","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":83758,"byte_end":83832,"line_start":400,"line_end":400,"column_start":1,"column_end":75}},{"value":"/ searcher that can be used to search haystacks without the overhead of","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":83833,"byte_end":83906,"line_start":401,"line_end":401,"column_start":1,"column_end":74}},{"value":"/ constructing the searcher in the first place. This is a somewhat niche","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":83907,"byte_end":83981,"line_start":402,"line_end":402,"column_start":1,"column_end":75}},{"value":"/ concern when it's necessary to re-use the same needle to search multiple","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":83982,"byte_end":84058,"line_start":403,"line_end":403,"column_start":1,"column_end":77}},{"value":"/ different haystacks with as little overhead as possible. In general, using","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84059,"byte_end":84137,"line_start":404,"line_end":404,"column_start":1,"column_end":79}},{"value":"/ [`find`] is good enough, but `Finder` is useful when you can meaningfully","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84138,"byte_end":84215,"line_start":405,"line_end":405,"column_start":1,"column_end":78}},{"value":"/ observe searcher construction time in a profile.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84216,"byte_end":84268,"line_start":406,"line_end":406,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84269,"byte_end":84272,"line_start":407,"line_end":407,"column_start":1,"column_end":4}},{"value":"/ When the `std` feature is enabled, then this type has an `into_owned`","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84273,"byte_end":84346,"line_start":408,"line_end":408,"column_start":1,"column_end":74}},{"value":"/ version which permits building a `Finder` that is not connected to","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84347,"byte_end":84417,"line_start":409,"line_end":409,"column_start":1,"column_end":71}},{"value":"/ the lifetime of its needle.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84418,"byte_end":84449,"line_start":410,"line_end":410,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84626,"byte_end":84629,"line_start":419,"line_end":419,"column_start":12,"column_end":15},"name":"new","qualname":"<Finder>::new","value":"pub fn new<B: ?Sized + AsRef<[u8]>>(&'n B) -> Finder","parent":null,"children":[],"decl_id":null,"docs":" Create a new finder for the given needle.\n","sig":null,"attributes":[{"value":"/ Create a new finder for the given needle.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84555,"byte_end":84600,"line_start":417,"line_end":417,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84605,"byte_end":84614,"line_start":418,"line_end":418,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85557,"byte_end":85561,"line_start":447,"line_end":447,"column_start":12,"column_end":16},"name":"find","qualname":"<Finder>::find","value":"pub fn find(&Self, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of this needle in the given\n haystack.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of this needle in the given","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84748,"byte_end":84821,"line_start":423,"line_end":423,"column_start":5,"column_end":78}},{"value":"/ haystack.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84826,"byte_end":84839,"line_start":424,"line_end":424,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84844,"byte_end":84847,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84852,"byte_end":84868,"line_start":426,"line_end":426,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84873,"byte_end":84876,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84881,"byte_end":84953,"line_start":428,"line_end":428,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84958,"byte_end":85030,"line_start":429,"line_end":429,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85035,"byte_end":85082,"line_start":430,"line_end":430,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85087,"byte_end":85090,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85095,"byte_end":85164,"line_start":432,"line_end":432,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85169,"byte_end":85184,"line_start":433,"line_end":433,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85189,"byte_end":85192,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85197,"byte_end":85211,"line_start":435,"line_end":435,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85216,"byte_end":85219,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85224,"byte_end":85240,"line_start":437,"line_end":437,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85245,"byte_end":85248,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85253,"byte_end":85260,"line_start":439,"line_end":439,"column_start":5,"column_end":12}},{"value":"/ use memchr::memmem::Finder;","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85265,"byte_end":85296,"line_start":440,"line_end":440,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85301,"byte_end":85304,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ let haystack = b\"foo bar baz\";","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85309,"byte_end":85343,"line_start":442,"line_end":442,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(Some(0), Finder::new(\"foo\").find(haystack));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85348,"byte_end":85407,"line_start":443,"line_end":443,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(Some(4), Finder::new(\"bar\").find(haystack));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85412,"byte_end":85471,"line_start":444,"line_end":444,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(None, Finder::new(\"quux\").find(haystack));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85476,"byte_end":85533,"line_start":445,"line_end":445,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85538,"byte_end":85545,"line_start":446,"line_end":446,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86564,"byte_end":86573,"line_start":478,"line_end":478,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Finder>::find_iter","value":"pub fn find_iter<'a, 'h>(&'a Self, &'h [u8]) -> FindIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all occurrences of a substring in a haystack.","sig":null,"attributes":[{"value":"/ Returns an iterator over all occurrences of a substring in a haystack.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85691,"byte_end":85765,"line_start":451,"line_end":451,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85770,"byte_end":85773,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85778,"byte_end":85794,"line_start":453,"line_end":453,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85799,"byte_end":85802,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85807,"byte_end":85879,"line_start":455,"line_end":455,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85884,"byte_end":85956,"line_start":456,"line_end":456,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":85961,"byte_end":86008,"line_start":457,"line_end":457,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86013,"byte_end":86016,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86021,"byte_end":86090,"line_start":459,"line_end":459,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86095,"byte_end":86110,"line_start":460,"line_end":460,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86115,"byte_end":86118,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86123,"byte_end":86137,"line_start":462,"line_end":462,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86142,"byte_end":86145,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86150,"byte_end":86166,"line_start":464,"line_end":464,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86171,"byte_end":86174,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86179,"byte_end":86186,"line_start":466,"line_end":466,"column_start":5,"column_end":12}},{"value":"/ use memchr::memmem::Finder;","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86191,"byte_end":86222,"line_start":467,"line_end":467,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86227,"byte_end":86230,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ let haystack = b\"foo bar foo baz foo\";","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86235,"byte_end":86277,"line_start":469,"line_end":469,"column_start":5,"column_end":47}},{"value":"/ let finder = Finder::new(b\"foo\");","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86282,"byte_end":86319,"line_start":470,"line_end":470,"column_start":5,"column_end":42}},{"value":"/ let mut it = finder.find_iter(haystack);","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86324,"byte_end":86368,"line_start":471,"line_end":471,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(Some(0), it.next());","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86373,"byte_end":86408,"line_start":472,"line_end":472,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some(8), it.next());","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86413,"byte_end":86448,"line_start":473,"line_end":473,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some(16), it.next());","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86453,"byte_end":86489,"line_start":474,"line_end":474,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86494,"byte_end":86526,"line_start":475,"line_end":475,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86531,"byte_end":86538,"line_start":476,"line_end":476,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":86543,"byte_end":86552,"line_start":477,"line_end":477,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":87739,"byte_end":87745,"line_start":509,"line_end":509,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<Finder>::as_ref","value":"pub fn as_ref(&Self) -> Finder","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its borrowed variant.","sig":null,"attributes":[{"value":"/ Convert this finder into its borrowed variant.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":87163,"byte_end":87213,"line_start":498,"line_end":498,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":87218,"byte_end":87221,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ This is primarily useful if your finder is owned and you'd like to","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":87226,"byte_end":87296,"line_start":500,"line_end":500,"column_start":5,"column_end":75}},{"value":"/ store its borrowed variant in some intermediate data structure.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":87301,"byte_end":87368,"line_start":501,"line_end":501,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":87373,"byte_end":87376,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime parameter of the returned finder is tied to the","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":87381,"byte_end":87455,"line_start":503,"line_end":503,"column_start":5,"column_end":79}},{"value":"/ lifetime of `self`, and may be shorter than the `'n` lifetime of the","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":87460,"byte_end":87532,"line_start":504,"line_end":504,"column_start":5,"column_end":77}},{"value":"/ needle itself. Namely, a finder's needle can be either borrowed or","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":87537,"byte_end":87607,"line_start":505,"line_end":505,"column_start":5,"column_end":75}},{"value":"/ owned, so the lifetime of the needle returned must necessarily be the","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":87612,"byte_end":87685,"line_start":506,"line_end":506,"column_start":5,"column_end":78}},{"value":"/ shorter of the two.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":87690,"byte_end":87713,"line_start":507,"line_end":507,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":87718,"byte_end":87727,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":88221,"byte_end":88227,"line_start":520,"line_end":520,"column_start":12,"column_end":18},"name":"needle","qualname":"<Finder>::needle","value":"pub fn needle(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the needle that this finder searches for.","sig":null,"attributes":[{"value":"/ Returns the needle that this finder searches for.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":87832,"byte_end":87885,"line_start":513,"line_end":513,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":87890,"byte_end":87893,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime of the needle returned is tied to the lifetime","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":87898,"byte_end":87971,"line_start":515,"line_end":515,"column_start":5,"column_end":78}},{"value":"/ of the finder, and may be shorter than the `'n` lifetime. Namely, a","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":87976,"byte_end":88047,"line_start":516,"line_end":516,"column_start":5,"column_end":76}},{"value":"/ finder's needle can be either borrowed or owned, so the lifetime of the","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":88052,"byte_end":88127,"line_start":517,"line_end":517,"column_start":5,"column_end":80}},{"value":"/ needle returned must necessarily be the shorter of the two.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":88132,"byte_end":88195,"line_start":518,"line_end":518,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":88200,"byte_end":88209,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":820},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89094,"byte_end":89103,"line_start":539,"line_end":539,"column_start":12,"column_end":21},"name":"FinderRev","qualname":"::memmem::FinderRev","value":"FinderRev {  }","parent":null,"children":[{"krate":0,"index":822}],"decl_id":null,"docs":" A single substring reverse searcher fixed to a particular needle.","sig":null,"attributes":[{"value":"/ A single substring reverse searcher fixed to a particular needle.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":88286,"byte_end":88355,"line_start":525,"line_end":525,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":88356,"byte_end":88359,"line_start":526,"line_end":526,"column_start":1,"column_end":4}},{"value":"/ The purpose of this type is to permit callers to construct a substring","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":88360,"byte_end":88434,"line_start":527,"line_end":527,"column_start":1,"column_end":75}},{"value":"/ searcher that can be used to search haystacks without the overhead of","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":88435,"byte_end":88508,"line_start":528,"line_end":528,"column_start":1,"column_end":74}},{"value":"/ constructing the searcher in the first place. This is a somewhat niche","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":88509,"byte_end":88583,"line_start":529,"line_end":529,"column_start":1,"column_end":75}},{"value":"/ concern when it's necessary to re-use the same needle to search multiple","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":88584,"byte_end":88660,"line_start":530,"line_end":530,"column_start":1,"column_end":77}},{"value":"/ different haystacks with as little overhead as possible. In general,","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":88661,"byte_end":88733,"line_start":531,"line_end":531,"column_start":1,"column_end":73}},{"value":"/ using [`rfind`] is good enough, but `FinderRev` is useful when you can","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":88734,"byte_end":88808,"line_start":532,"line_end":532,"column_start":1,"column_end":75}},{"value":"/ meaningfully observe searcher construction time in a profile.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":88809,"byte_end":88874,"line_start":533,"line_end":533,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":88875,"byte_end":88878,"line_start":534,"line_end":534,"column_start":1,"column_end":4}},{"value":"/ When the `std` feature is enabled, then this type has an `into_owned`","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":88879,"byte_end":88952,"line_start":535,"line_end":535,"column_start":1,"column_end":74}},{"value":"/ version which permits building a `FinderRev` that is not connected to","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":88953,"byte_end":89026,"line_start":536,"line_end":536,"column_start":1,"column_end":74}},{"value":"/ the lifetime of its needle.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89027,"byte_end":89058,"line_start":537,"line_end":537,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89252,"byte_end":89255,"line_start":546,"line_end":546,"column_start":12,"column_end":15},"name":"new","qualname":"<FinderRev>::new","value":"pub fn new<B: ?Sized + AsRef<[u8]>>(&'n B) -> FinderRev","parent":null,"children":[],"decl_id":null,"docs":" Create a new reverse finder for the given needle.\n","sig":null,"attributes":[{"value":"/ Create a new reverse finder for the given needle.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89173,"byte_end":89226,"line_start":544,"line_end":544,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89231,"byte_end":89240,"line_start":545,"line_end":545,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90357,"byte_end":90362,"line_start":577,"line_end":577,"column_start":12,"column_end":17},"name":"rfind","qualname":"<FinderRev>::rfind","value":"pub fn rfind<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of this needle in the given\n haystack.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of this needle in the given","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89377,"byte_end":89449,"line_start":550,"line_end":550,"column_start":5,"column_end":77}},{"value":"/ haystack.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89454,"byte_end":89467,"line_start":551,"line_end":551,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89472,"byte_end":89475,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ The haystack may be any type that can be cheaply converted into a","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89480,"byte_end":89549,"line_start":553,"line_end":553,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89554,"byte_end":89624,"line_start":554,"line_end":554,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89629,"byte_end":89632,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89637,"byte_end":89653,"line_start":556,"line_end":556,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89658,"byte_end":89661,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89666,"byte_end":89738,"line_start":558,"line_end":558,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89743,"byte_end":89815,"line_start":559,"line_end":559,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89820,"byte_end":89867,"line_start":560,"line_end":560,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89872,"byte_end":89875,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89880,"byte_end":89949,"line_start":562,"line_end":562,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89954,"byte_end":89969,"line_start":563,"line_end":563,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89974,"byte_end":89977,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89982,"byte_end":89996,"line_start":565,"line_end":565,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90001,"byte_end":90004,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90009,"byte_end":90025,"line_start":567,"line_end":567,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90030,"byte_end":90033,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90038,"byte_end":90045,"line_start":569,"line_end":569,"column_start":5,"column_end":12}},{"value":"/ use memchr::memmem::FinderRev;","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90050,"byte_end":90084,"line_start":570,"line_end":570,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90089,"byte_end":90092,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ let haystack = b\"foo bar baz\";","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90097,"byte_end":90131,"line_start":572,"line_end":572,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(Some(0), FinderRev::new(\"foo\").rfind(haystack));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90136,"byte_end":90199,"line_start":573,"line_end":573,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(Some(4), FinderRev::new(\"bar\").rfind(haystack));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90204,"byte_end":90267,"line_start":574,"line_end":574,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(None, FinderRev::new(\"quux\").rfind(haystack));","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90272,"byte_end":90333,"line_start":575,"line_end":575,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90338,"byte_end":90345,"line_start":576,"line_end":576,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":91371,"byte_end":91381,"line_start":609,"line_end":609,"column_start":12,"column_end":22},"name":"rfind_iter","qualname":"<FinderRev>::rfind_iter","value":"pub fn rfind_iter<'a, 'h>(&'a Self, &'h [u8]) -> FindRevIter","parent":null,"children":[],"decl_id":null,"docs":" Returns a reverse iterator over all occurrences of a substring in a\n haystack.","sig":null,"attributes":[{"value":"/ Returns a reverse iterator over all occurrences of a substring in a","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90476,"byte_end":90547,"line_start":581,"line_end":581,"column_start":5,"column_end":76}},{"value":"/ haystack.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90552,"byte_end":90565,"line_start":582,"line_end":582,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90570,"byte_end":90573,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90578,"byte_end":90594,"line_start":584,"line_end":584,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90599,"byte_end":90602,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90607,"byte_end":90679,"line_start":586,"line_end":586,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90684,"byte_end":90756,"line_start":587,"line_end":587,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90761,"byte_end":90808,"line_start":588,"line_end":588,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90813,"byte_end":90816,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90821,"byte_end":90890,"line_start":590,"line_end":590,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90895,"byte_end":90910,"line_start":591,"line_end":591,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90915,"byte_end":90918,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90923,"byte_end":90937,"line_start":593,"line_end":593,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90942,"byte_end":90945,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90950,"byte_end":90966,"line_start":595,"line_end":595,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90971,"byte_end":90974,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90979,"byte_end":90986,"line_start":597,"line_end":597,"column_start":5,"column_end":12}},{"value":"/ use memchr::memmem::FinderRev;","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":90991,"byte_end":91025,"line_start":598,"line_end":598,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":91030,"byte_end":91033,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ let haystack = b\"foo bar foo baz foo\";","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":91038,"byte_end":91080,"line_start":600,"line_end":600,"column_start":5,"column_end":47}},{"value":"/ let finder = FinderRev::new(b\"foo\");","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":91085,"byte_end":91125,"line_start":601,"line_end":601,"column_start":5,"column_end":45}},{"value":"/ let mut it = finder.rfind_iter(haystack);","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":91130,"byte_end":91175,"line_start":602,"line_end":602,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(Some(16), it.next());","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":91180,"byte_end":91216,"line_start":603,"line_end":603,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(Some(8), it.next());","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":91221,"byte_end":91256,"line_start":604,"line_end":604,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some(0), it.next());","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":91261,"byte_end":91296,"line_start":605,"line_end":605,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":91301,"byte_end":91333,"line_start":606,"line_end":606,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":91338,"byte_end":91345,"line_start":607,"line_end":607,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":91350,"byte_end":91359,"line_start":608,"line_end":608,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92559,"byte_end":92565,"line_start":640,"line_end":640,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FinderRev>::as_ref","value":"pub fn as_ref(&Self) -> FinderRev","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its borrowed variant.","sig":null,"attributes":[{"value":"/ Convert this finder into its borrowed variant.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":91983,"byte_end":92033,"line_start":629,"line_end":629,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92038,"byte_end":92041,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ This is primarily useful if your finder is owned and you'd like to","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92046,"byte_end":92116,"line_start":631,"line_end":631,"column_start":5,"column_end":75}},{"value":"/ store its borrowed variant in some intermediate data structure.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92121,"byte_end":92188,"line_start":632,"line_end":632,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92193,"byte_end":92196,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime parameter of the returned finder is tied to the","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92201,"byte_end":92275,"line_start":634,"line_end":634,"column_start":5,"column_end":79}},{"value":"/ lifetime of `self`, and may be shorter than the `'n` lifetime of the","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92280,"byte_end":92352,"line_start":635,"line_end":635,"column_start":5,"column_end":77}},{"value":"/ needle itself. Namely, a finder's needle can be either borrowed or","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92357,"byte_end":92427,"line_start":636,"line_end":636,"column_start":5,"column_end":75}},{"value":"/ owned, so the lifetime of the needle returned must necessarily be the","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92432,"byte_end":92505,"line_start":637,"line_end":637,"column_start":5,"column_end":78}},{"value":"/ shorter of the two.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92510,"byte_end":92533,"line_start":638,"line_end":638,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92538,"byte_end":92547,"line_start":639,"line_end":639,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":93047,"byte_end":93053,"line_start":651,"line_end":651,"column_start":12,"column_end":18},"name":"needle","qualname":"<FinderRev>::needle","value":"pub fn needle(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the needle that this finder searches for.","sig":null,"attributes":[{"value":"/ Returns the needle that this finder searches for.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92658,"byte_end":92711,"line_start":644,"line_end":644,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92716,"byte_end":92719,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime of the needle returned is tied to the lifetime","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92724,"byte_end":92797,"line_start":646,"line_end":646,"column_start":5,"column_end":78}},{"value":"/ of the finder, and may be shorter than the `'n` lifetime. Namely, a","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92802,"byte_end":92873,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/ finder's needle can be either borrowed or owned, so the lifetime of the","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92878,"byte_end":92953,"line_start":648,"line_end":648,"column_start":5,"column_end":80}},{"value":"/ needle returned must necessarily be the shorter of the two.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":92958,"byte_end":93021,"line_start":649,"line_end":649,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":93026,"byte_end":93035,"line_start":650,"line_end":650,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":829},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":93442,"byte_end":93455,"line_start":662,"line_end":662,"column_start":12,"column_end":25},"name":"FinderBuilder","qualname":"::memmem::FinderBuilder","value":"FinderBuilder {  }","parent":null,"children":[{"krate":0,"index":830}],"decl_id":null,"docs":" A builder for constructing non-default forward or reverse memmem finders.","sig":null,"attributes":[{"value":"/ A builder for constructing non-default forward or reverse memmem finders.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":93112,"byte_end":93189,"line_start":656,"line_end":656,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":93190,"byte_end":93193,"line_start":657,"line_end":657,"column_start":1,"column_end":4}},{"value":"/ A builder is primarily useful for configuring a substring searcher.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":93194,"byte_end":93265,"line_start":658,"line_end":658,"column_start":1,"column_end":72}},{"value":"/ Currently, the only configuration exposed is the ability to disable","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":93266,"byte_end":93337,"line_start":659,"line_end":659,"column_start":1,"column_end":72}},{"value":"/ heuristic prefilters used to speed up certain searches.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":93338,"byte_end":93397,"line_start":660,"line_end":660,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":93580,"byte_end":93583,"line_start":668,"line_end":668,"column_start":12,"column_end":15},"name":"new","qualname":"<FinderBuilder>::new","value":"pub fn new() -> FinderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new finder builder with default settings.\n","sig":null,"attributes":[{"value":"/ Create a new finder builder with default settings.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":93514,"byte_end":93568,"line_start":667,"line_end":667,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":93745,"byte_end":93758,"line_start":674,"line_end":674,"column_start":12,"column_end":25},"name":"build_forward","qualname":"<FinderBuilder>::build_forward","value":"pub fn build_forward<'n, B: ?Sized + AsRef<[u8]>>(&Self, &'n B) -> Finder","parent":null,"children":[],"decl_id":null,"docs":" Build a forward finder using the given needle from the current\n settings.\n","sig":null,"attributes":[{"value":"/ Build a forward finder using the given needle from the current","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":93649,"byte_end":93715,"line_start":672,"line_end":672,"column_start":5,"column_end":71}},{"value":"/ settings.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":93720,"byte_end":93733,"line_start":673,"line_end":673,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":94029,"byte_end":94042,"line_start":683,"line_end":683,"column_start":12,"column_end":25},"name":"build_reverse","qualname":"<FinderBuilder>::build_reverse","value":"pub fn build_reverse<'n, B: ?Sized + AsRef<[u8]>>(&Self, &'n B) -> FinderRev","parent":null,"children":[],"decl_id":null,"docs":" Build a reverse finder using the given needle from the current\n settings.\n","sig":null,"attributes":[{"value":"/ Build a reverse finder using the given needle from the current","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":93933,"byte_end":93999,"line_start":681,"line_end":681,"column_start":5,"column_end":71}},{"value":"/ settings.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":94004,"byte_end":94017,"line_start":682,"line_end":682,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":94401,"byte_end":94410,"line_start":694,"line_end":694,"column_start":12,"column_end":21},"name":"prefilter","qualname":"<FinderBuilder>::prefilter","value":"pub fn prefilter(&mut Self, Prefilter) -> &mut FinderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the prefilter setting for the finder.","sig":null,"attributes":[{"value":"/ Configure the prefilter setting for the finder.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":94213,"byte_end":94264,"line_start":690,"line_end":690,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":94269,"byte_end":94272,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ See the documentation for [`Prefilter`] for more discussion on why","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":94277,"byte_end":94347,"line_start":692,"line_end":692,"column_start":5,"column_end":75}},{"value":"/ you might want to configure this.","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":94352,"byte_end":94389,"line_start":693,"line_end":693,"column_start":5,"column_end":42}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/cow.rs","byte_start":7398,"byte_end":7406,"line_start":26,"line_end":26,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/cow.rs","byte_start":7533,"byte_end":7541,"line_start":35,"line_end":35,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/cow.rs","byte_start":8623,"byte_end":8626,"line_start":70,"line_end":70,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":33657,"byte_end":33663,"line_start":42,"line_end":42,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":33922,"byte_end":33928,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":34230,"byte_end":34236,"line_start":64,"line_end":64,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":34585,"byte_end":34592,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":34944,"byte_end":34951,"line_start":94,"line_end":94,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":35269,"byte_end":35276,"line_start":108,"line_end":108,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":35692,"byte_end":35699,"line_start":129,"line_end":129,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":36127,"byte_end":36134,"line_start":148,"line_end":148,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":36500,"byte_end":36507,"line_start":165,"line_end":165,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/genericsimd.rs","byte_start":123518,"byte_end":123525,"line_start":61,"line_end":61,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":132452,"byte_end":132455,"line_start":29,"line_end":29,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":135252,"byte_end":135263,"line_start":93,"line_end":93,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":136259,"byte_end":136270,"line_start":120,"line_end":120,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":138213,"byte_end":138222,"line_start":162,"line_end":162,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":138295,"byte_end":138304,"line_start":168,"line_end":168,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":139568,"byte_end":139582,"line_start":199,"line_end":199,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/rabinkarp.rs","byte_start":173213,"byte_end":173223,"line_start":115,"line_end":115,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/rabinkarp.rs","byte_start":174525,"byte_end":174529,"line_start":157,"line_end":157,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/rarebytes.rs","byte_start":178904,"byte_end":178919,"line_start":37,"line_end":37,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/twoway.rs","byte_start":186744,"byte_end":186751,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/twoway.rs","byte_start":192434,"byte_end":192441,"line_start":244,"line_end":244,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/twoway.rs","byte_start":197238,"byte_end":197244,"line_start":383,"line_end":383,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/twoway.rs","byte_start":199332,"byte_end":199337,"line_start":429,"line_end":429,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/twoway.rs","byte_start":201919,"byte_end":201925,"line_start":495,"line_end":495,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/twoway.rs","byte_start":207068,"byte_end":207078,"line_start":623,"line_end":623,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/twoway.rs","byte_start":208155,"byte_end":208173,"line_start":650,"line_end":650,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":477},{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/vector.rs","byte_start":221212,"byte_end":221219,"line_start":39,"line_end":39,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/x86/avx.rs","byte_start":225487,"byte_end":225494,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/x86/sse.rs","byte_start":227443,"byte_end":227450,"line_start":10,"line_end":10,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":81520,"byte_end":81528,"line_start":316,"line_end":316,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":81817,"byte_end":81825,"line_start":327,"line_end":327,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":82859,"byte_end":82870,"line_start":364,"line_end":364,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":83137,"byte_end":83148,"line_start":375,"line_end":375,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84538,"byte_end":84544,"line_start":416,"line_end":416,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89153,"byte_end":89162,"line_start":543,"line_end":543,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":577},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":93494,"byte_end":93507,"line_start":666,"line_end":666,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":584},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":98105,"byte_end":98113,"line_start":780,"line_end":780,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":105484,"byte_end":105494,"line_start":987,"line_end":987,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":106924,"byte_end":106935,"line_start":1027,"line_end":1027,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":603},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/lib.rs","byte_start":6555,"byte_end":6561,"line_start":179,"line_end":179,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":261}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/cow.rs","byte_start":7398,"byte_end":7406,"line_start":26,"line_end":26,"column_start":25,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":610},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/cow.rs","byte_start":7533,"byte_end":7541,"line_start":35,"line_end":35,"column_start":10,"column_end":18},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":610},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/cow.rs","byte_start":8623,"byte_end":8626,"line_start":70,"line_end":70,"column_start":10,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":33657,"byte_end":33663,"line_start":42,"line_end":42,"column_start":10,"column_end":16},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":33922,"byte_end":33928,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":7822}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":34230,"byte_end":34236,"line_start":64,"line_end":64,"column_start":34,"column_end":40},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":7677}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":34585,"byte_end":34592,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":34944,"byte_end":34951,"line_start":94,"line_end":94,"column_start":23,"column_end":30},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":152},"to":{"krate":1,"index":7822}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":35269,"byte_end":35276,"line_start":108,"line_end":108,"column_start":34,"column_end":41},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":152},"to":{"krate":1,"index":7677}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":35692,"byte_end":35699,"line_start":129,"line_end":129,"column_start":10,"column_end":17},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":169},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":36127,"byte_end":36134,"line_start":148,"line_end":148,"column_start":23,"column_end":30},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":169},"to":{"krate":1,"index":7822}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memchr/iter.rs","byte_start":36500,"byte_end":36507,"line_start":165,"line_end":165,"column_start":34,"column_end":41},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":169},"to":{"krate":1,"index":7677}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/genericsimd.rs","byte_start":123518,"byte_end":123525,"line_start":61,"line_end":61,"column_start":6,"column_end":13},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":132452,"byte_end":132455,"line_start":29,"line_end":29,"column_start":10,"column_end":13},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":135252,"byte_end":135263,"line_start":93,"line_end":93,"column_start":6,"column_end":17},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":136259,"byte_end":136270,"line_start":120,"line_end":120,"column_start":27,"column_end":38},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":644},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":138213,"byte_end":138222,"line_start":162,"line_end":162,"column_start":18,"column_end":27},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":650},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":138295,"byte_end":138304,"line_start":168,"line_end":168,"column_start":6,"column_end":15},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":650},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/prefilter/mod.rs","byte_start":139568,"byte_end":139582,"line_start":199,"line_end":199,"column_start":6,"column_end":20},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":660},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/rabinkarp.rs","byte_start":173213,"byte_end":173223,"line_start":115,"line_end":115,"column_start":6,"column_end":16},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/rabinkarp.rs","byte_start":174525,"byte_end":174529,"line_start":157,"line_end":157,"column_start":6,"column_end":10},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/rarebytes.rs","byte_start":178904,"byte_end":178919,"line_start":37,"line_end":37,"column_start":6,"column_end":21},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":694},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/twoway.rs","byte_start":186744,"byte_end":186751,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":704},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/twoway.rs","byte_start":192434,"byte_end":192441,"line_start":244,"line_end":244,"column_start":6,"column_end":13},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/twoway.rs","byte_start":197238,"byte_end":197244,"line_start":383,"line_end":383,"column_start":6,"column_end":12},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":720},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/twoway.rs","byte_start":199332,"byte_end":199337,"line_start":429,"line_end":429,"column_start":6,"column_end":11},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/twoway.rs","byte_start":201919,"byte_end":201925,"line_start":495,"line_end":495,"column_start":6,"column_end":12},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":739},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/twoway.rs","byte_start":207068,"byte_end":207078,"line_start":623,"line_end":623,"column_start":6,"column_end":16},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/twoway.rs","byte_start":208155,"byte_end":208173,"line_start":650,"line_end":650,"column_start":6,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/vector.rs","byte_start":220611,"byte_end":220615,"line_start":21,"line_end":21,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":484}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/vector.rs","byte_start":220629,"byte_end":220634,"line_start":21,"line_end":21,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":9553},"to":{"krate":0,"index":484}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/vector.rs","byte_start":221212,"byte_end":221219,"line_start":39,"line_end":39,"column_start":21,"column_end":28},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":50872},"to":{"krate":0,"index":484}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/x86/avx.rs","byte_start":225487,"byte_end":225494,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":774},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/x86/sse.rs","byte_start":227443,"byte_end":227450,"line_start":10,"line_end":10,"column_start":6,"column_end":13},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":782},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":81520,"byte_end":81528,"line_start":316,"line_end":316,"column_start":14,"column_end":22},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":81817,"byte_end":81825,"line_start":327,"line_end":327,"column_start":27,"column_end":35},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":790},"to":{"krate":1,"index":7822}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":82859,"byte_end":82870,"line_start":364,"line_end":364,"column_start":14,"column_end":25},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":801},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":83137,"byte_end":83148,"line_start":375,"line_end":375,"column_start":27,"column_end":38},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":801},"to":{"krate":1,"index":7822}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":84538,"byte_end":84544,"line_start":416,"line_end":416,"column_start":10,"column_end":16},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":89153,"byte_end":89162,"line_start":543,"line_end":543,"column_start":10,"column_end":19},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":93494,"byte_end":93507,"line_start":666,"line_end":666,"column_start":6,"column_end":19},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":98105,"byte_end":98113,"line_start":780,"line_end":780,"column_start":10,"column_end":18},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":837},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":105484,"byte_end":105494,"line_start":987,"line_end":987,"column_start":6,"column_end":16},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":849},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ask/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.1/src/memmem/mod.rs","byte_start":106924,"byte_end":106935,"line_start":1027,"line_end":1027,"column_start":10,"column_end":21},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":885},"to":{"krate":4294967295,"index":4294967295}}]}